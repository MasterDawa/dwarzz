{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';import{generatePassiveBTC}from'../utils/passiveBTC';// Generate random price fluctuations\nconst generatePrices=()=>{return{manhattan:{weed:Math.floor(Math.random()*30)+50,cocaine:Math.floor(Math.random()*100)+200,heroin:Math.floor(Math.random()*150)+300,meth:Math.floor(Math.random()*80)+120,ecstasy:Math.floor(Math.random()*50)+80},brooklyn:{weed:Math.floor(Math.random()*30)+40,cocaine:Math.floor(Math.random()*100)+180,heroin:Math.floor(Math.random()*150)+250,meth:Math.floor(Math.random()*80)+100,ecstasy:Math.floor(Math.random()*50)+70},queens:{weed:Math.floor(Math.random()*30)+45,cocaine:Math.floor(Math.random()*100)+190,heroin:Math.floor(Math.random()*150)+270,meth:Math.floor(Math.random()*80)+110,ecstasy:Math.floor(Math.random()*50)+75},bronx:{weed:Math.floor(Math.random()*30)+35,cocaine:Math.floor(Math.random()*100)+170,heroin:Math.floor(Math.random()*150)+240,meth:Math.floor(Math.random()*80)+90,ecstasy:Math.floor(Math.random()*50)+65},statenIsland:{weed:Math.floor(Math.random()*30)+55,cocaine:Math.floor(Math.random()*100)+210,heroin:Math.floor(Math.random()*150)+320,meth:Math.floor(Math.random()*80)+130,ecstasy:Math.floor(Math.random()*50)+85}};};const initialState={day:1,prices:generatePrices(),lastMessage:'',messageHistory:[],locations:['manhattan','brooklyn','queens','bronx','statenIsland'],gameStarted:false,gameOver:false};export const gameSlice=createSlice({name:'game',initialState,reducers:{nextDay:state=>{state.day+=1;state.prices=generatePrices();// Dispatch BTC generation\ndispatch(generatePassiveBTC());},addMessage:(state,action)=>{state.lastMessage=action.payload;state.messageHistory.push({day:state.day,message:action.payload});// Keep only the last 20 messages\nif(state.messageHistory.length>20){state.messageHistory.shift();}},startGame:state=>{state.gameStarted=true;},endGame:state=>{state.gameOver=true;},resetGame:state=>{// Only reset the gameStarted flag, don't reset the entire state\nstate.gameStarted=false;},resetFullGame:()=>initialState,loadGameState:(state,action)=>{return{...action.payload};}}});export const{nextDay,addMessage,startGame,endGame,resetGame,resetFullGame,loadGameState}=gameSlice.actions;export default gameSlice.reducer;","map":{"version":3,"names":["createSlice","generatePassiveBTC","generatePrices","manhattan","weed","Math","floor","random","cocaine","heroin","meth","ecstasy","brooklyn","queens","bronx","statenIsland","initialState","day","prices","lastMessage","messageHistory","locations","gameStarted","gameOver","gameSlice","name","reducers","nextDay","state","dispatch","addMessage","action","payload","push","message","length","shift","startGame","endGame","resetGame","resetFullGame","loadGameState","actions","reducer"],"sources":["D:/GitHome/dwarzz/src/store/gameSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { generatePassiveBTC } from '../utils/passiveBTC';\r\n\r\n// Generate random price fluctuations\r\nconst generatePrices = () => {\r\n  return {\r\n    manhattan: {\r\n      weed: Math.floor(Math.random() * 30) + 50,\r\n      cocaine: Math.floor(Math.random() * 100) + 200,\r\n      heroin: Math.floor(Math.random() * 150) + 300,\r\n      meth: Math.floor(Math.random() * 80) + 120,\r\n      ecstasy: Math.floor(Math.random() * 50) + 80\r\n    },\r\n    brooklyn: {\r\n      weed: Math.floor(Math.random() * 30) + 40,\r\n      cocaine: Math.floor(Math.random() * 100) + 180,\r\n      heroin: Math.floor(Math.random() * 150) + 250,\r\n      meth: Math.floor(Math.random() * 80) + 100,\r\n      ecstasy: Math.floor(Math.random() * 50) + 70\r\n    },\r\n    queens: {\r\n      weed: Math.floor(Math.random() * 30) + 45,\r\n      cocaine: Math.floor(Math.random() * 100) + 190,\r\n      heroin: Math.floor(Math.random() * 150) + 270,\r\n      meth: Math.floor(Math.random() * 80) + 110,\r\n      ecstasy: Math.floor(Math.random() * 50) + 75\r\n    },\r\n    bronx: {\r\n      weed: Math.floor(Math.random() * 30) + 35,\r\n      cocaine: Math.floor(Math.random() * 100) + 170,\r\n      heroin: Math.floor(Math.random() * 150) + 240,\r\n      meth: Math.floor(Math.random() * 80) + 90,\r\n      ecstasy: Math.floor(Math.random() * 50) + 65\r\n    },\r\n    statenIsland: {\r\n      weed: Math.floor(Math.random() * 30) + 55,\r\n      cocaine: Math.floor(Math.random() * 100) + 210,\r\n      heroin: Math.floor(Math.random() * 150) + 320,\r\n      meth: Math.floor(Math.random() * 80) + 130,\r\n      ecstasy: Math.floor(Math.random() * 50) + 85\r\n    }\r\n  };\r\n};\r\n\r\nconst initialState = {\r\n  day: 1,\r\n  prices: generatePrices(),\r\n  lastMessage: '',\r\n  messageHistory: [],\r\n  locations: [\r\n    'manhattan',\r\n    'brooklyn',\r\n    'queens',\r\n    'bronx',\r\n    'statenIsland'\r\n  ],\r\n  gameStarted: false,\r\n  gameOver: false\r\n};\r\n\r\nexport const gameSlice = createSlice({\r\n  name: 'game',\r\n  initialState,\r\n  reducers: {\r\n    nextDay: (state) => {\r\n      state.day += 1;\r\n      state.prices = generatePrices();\r\n      // Dispatch BTC generation\r\n      dispatch(generatePassiveBTC());\r\n    },\r\n    addMessage: (state, action) => {\r\n      state.lastMessage = action.payload;\r\n      state.messageHistory.push({\r\n        day: state.day,\r\n        message: action.payload\r\n      });\r\n      \r\n      // Keep only the last 20 messages\r\n      if (state.messageHistory.length > 20) {\r\n        state.messageHistory.shift();\r\n      }\r\n    },\r\n    startGame: (state) => {\r\n      state.gameStarted = true;\r\n    },\r\n    endGame: (state) => {\r\n      state.gameOver = true;\r\n    },\r\n    resetGame: (state) => {\r\n      // Only reset the gameStarted flag, don't reset the entire state\r\n      state.gameStarted = false;\r\n    },\r\n    resetFullGame: () => initialState,\r\n    loadGameState: (state, action) => {\r\n      return { ...action.payload };\r\n    }\r\n  }\r\n});\r\n\r\nexport const { \r\n  nextDay, \r\n  addMessage, \r\n  startGame, \r\n  endGame, \r\n  resetGame,\r\n  resetFullGame,\r\n  loadGameState\r\n} = gameSlice.actions;\r\n\r\nexport default gameSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}