{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// Generate random price fluctuations\nconst generatePrices = () => {\n  return {\n    manhattan: {\n      weed: Math.floor(Math.random() * 30) + 50,\n      cocaine: Math.floor(Math.random() * 100) + 200,\n      heroin: Math.floor(Math.random() * 150) + 300,\n      meth: Math.floor(Math.random() * 80) + 120,\n      ecstasy: Math.floor(Math.random() * 50) + 80\n    },\n    brooklyn: {\n      weed: Math.floor(Math.random() * 30) + 40,\n      cocaine: Math.floor(Math.random() * 100) + 180,\n      heroin: Math.floor(Math.random() * 150) + 250,\n      meth: Math.floor(Math.random() * 80) + 100,\n      ecstasy: Math.floor(Math.random() * 50) + 70\n    },\n    queens: {\n      weed: Math.floor(Math.random() * 30) + 45,\n      cocaine: Math.floor(Math.random() * 100) + 190,\n      heroin: Math.floor(Math.random() * 150) + 270,\n      meth: Math.floor(Math.random() * 80) + 110,\n      ecstasy: Math.floor(Math.random() * 50) + 75\n    },\n    bronx: {\n      weed: Math.floor(Math.random() * 30) + 35,\n      cocaine: Math.floor(Math.random() * 100) + 170,\n      heroin: Math.floor(Math.random() * 150) + 240,\n      meth: Math.floor(Math.random() * 80) + 90,\n      ecstasy: Math.floor(Math.random() * 50) + 65\n    },\n    statenIsland: {\n      weed: Math.floor(Math.random() * 30) + 55,\n      cocaine: Math.floor(Math.random() * 100) + 210,\n      heroin: Math.floor(Math.random() * 150) + 320,\n      meth: Math.floor(Math.random() * 80) + 130,\n      ecstasy: Math.floor(Math.random() * 50) + 85\n    }\n  };\n};\nconst initialState = {\n  day: 1,\n  prices: generatePrices(),\n  lastMessage: '',\n  messageHistory: [],\n  locations: ['manhattan', 'brooklyn', 'queens', 'bronx', 'statenIsland'],\n  gameStarted: false,\n  gameOver: false\n};\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    nextDay: state => {\n      state.day += 1;\n      state.prices = generatePrices();\n    },\n    addMessage: (state, action) => {\n      state.lastMessage = action.payload;\n      state.messageHistory.push({\n        day: state.day,\n        message: action.payload\n      });\n\n      // Keep only the last 20 messages\n      if (state.messageHistory.length > 20) {\n        state.messageHistory.shift();\n      }\n    },\n    startGame: state => {\n      state.gameStarted = true;\n    },\n    endGame: state => {\n      state.gameOver = true;\n    },\n    resetGame: state => {\n      // Only reset the gameStarted flag, don't reset the entire state\n      state.gameStarted = false;\n    },\n    resetFullGame: () => initialState,\n    loadGameState: (state, action) => {\n      return {\n        ...action.payload\n      };\n    }\n  }\n});\nexport const {\n  nextDay,\n  addMessage,\n  startGame,\n  endGame,\n  resetGame,\n  resetFullGame,\n  loadGameState\n} = gameSlice.actions;\nexport default gameSlice.reducer;","map":{"version":3,"names":["createSlice","generatePrices","manhattan","weed","Math","floor","random","cocaine","heroin","meth","ecstasy","brooklyn","queens","bronx","statenIsland","initialState","day","prices","lastMessage","messageHistory","locations","gameStarted","gameOver","gameSlice","name","reducers","nextDay","state","addMessage","action","payload","push","message","length","shift","startGame","endGame","resetGame","resetFullGame","loadGameState","actions","reducer"],"sources":["D:/GitHome/dwarzz/src/store/gameSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\n// Generate random price fluctuations\r\nconst generatePrices = () => {\r\n  return {\r\n    manhattan: {\r\n      weed: Math.floor(Math.random() * 30) + 50,\r\n      cocaine: Math.floor(Math.random() * 100) + 200,\r\n      heroin: Math.floor(Math.random() * 150) + 300,\r\n      meth: Math.floor(Math.random() * 80) + 120,\r\n      ecstasy: Math.floor(Math.random() * 50) + 80\r\n    },\r\n    brooklyn: {\r\n      weed: Math.floor(Math.random() * 30) + 40,\r\n      cocaine: Math.floor(Math.random() * 100) + 180,\r\n      heroin: Math.floor(Math.random() * 150) + 250,\r\n      meth: Math.floor(Math.random() * 80) + 100,\r\n      ecstasy: Math.floor(Math.random() * 50) + 70\r\n    },\r\n    queens: {\r\n      weed: Math.floor(Math.random() * 30) + 45,\r\n      cocaine: Math.floor(Math.random() * 100) + 190,\r\n      heroin: Math.floor(Math.random() * 150) + 270,\r\n      meth: Math.floor(Math.random() * 80) + 110,\r\n      ecstasy: Math.floor(Math.random() * 50) + 75\r\n    },\r\n    bronx: {\r\n      weed: Math.floor(Math.random() * 30) + 35,\r\n      cocaine: Math.floor(Math.random() * 100) + 170,\r\n      heroin: Math.floor(Math.random() * 150) + 240,\r\n      meth: Math.floor(Math.random() * 80) + 90,\r\n      ecstasy: Math.floor(Math.random() * 50) + 65\r\n    },\r\n    statenIsland: {\r\n      weed: Math.floor(Math.random() * 30) + 55,\r\n      cocaine: Math.floor(Math.random() * 100) + 210,\r\n      heroin: Math.floor(Math.random() * 150) + 320,\r\n      meth: Math.floor(Math.random() * 80) + 130,\r\n      ecstasy: Math.floor(Math.random() * 50) + 85\r\n    }\r\n  };\r\n};\r\n\r\nconst initialState = {\r\n  day: 1,\r\n  prices: generatePrices(),\r\n  lastMessage: '',\r\n  messageHistory: [],\r\n  locations: [\r\n    'manhattan',\r\n    'brooklyn',\r\n    'queens',\r\n    'bronx',\r\n    'statenIsland'\r\n  ],\r\n  gameStarted: false,\r\n  gameOver: false\r\n};\r\n\r\nexport const gameSlice = createSlice({\r\n  name: 'game',\r\n  initialState,\r\n  reducers: {\r\n    nextDay: (state) => {\r\n      state.day += 1;\r\n      state.prices = generatePrices();\r\n    },\r\n    addMessage: (state, action) => {\r\n      state.lastMessage = action.payload;\r\n      state.messageHistory.push({\r\n        day: state.day,\r\n        message: action.payload\r\n      });\r\n      \r\n      // Keep only the last 20 messages\r\n      if (state.messageHistory.length > 20) {\r\n        state.messageHistory.shift();\r\n      }\r\n    },\r\n    startGame: (state) => {\r\n      state.gameStarted = true;\r\n    },\r\n    endGame: (state) => {\r\n      state.gameOver = true;\r\n    },\r\n    resetGame: (state) => {\r\n      // Only reset the gameStarted flag, don't reset the entire state\r\n      state.gameStarted = false;\r\n    },\r\n    resetFullGame: () => initialState,\r\n    loadGameState: (state, action) => {\r\n      return { ...action.payload };\r\n    }\r\n  }\r\n});\r\n\r\nexport const { \r\n  nextDay, \r\n  addMessage, \r\n  startGame, \r\n  endGame, \r\n  resetGame,\r\n  resetFullGame,\r\n  loadGameState\r\n} = gameSlice.actions;\r\n\r\nexport default gameSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,OAAO;IACLC,SAAS,EAAE;MACTC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;MACzCC,OAAO,EAAEH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;MAC9CE,MAAM,EAAEJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;MAC7CG,IAAI,EAAEL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;MAC1CI,OAAO,EAAEN,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG;IAC5C,CAAC;IACDK,QAAQ,EAAE;MACRR,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;MACzCC,OAAO,EAAEH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;MAC9CE,MAAM,EAAEJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;MAC7CG,IAAI,EAAEL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;MAC1CI,OAAO,EAAEN,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG;IAC5C,CAAC;IACDM,MAAM,EAAE;MACNT,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;MACzCC,OAAO,EAAEH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;MAC9CE,MAAM,EAAEJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;MAC7CG,IAAI,EAAEL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;MAC1CI,OAAO,EAAEN,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG;IAC5C,CAAC;IACDO,KAAK,EAAE;MACLV,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;MACzCC,OAAO,EAAEH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;MAC9CE,MAAM,EAAEJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;MAC7CG,IAAI,EAAEL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;MACzCI,OAAO,EAAEN,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG;IAC5C,CAAC;IACDQ,YAAY,EAAE;MACZX,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;MACzCC,OAAO,EAAEH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;MAC9CE,MAAM,EAAEJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;MAC7CG,IAAI,EAAEL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;MAC1CI,OAAO,EAAEN,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG;IAC5C;EACF,CAAC;AACH,CAAC;AAED,MAAMS,YAAY,GAAG;EACnBC,GAAG,EAAE,CAAC;EACNC,MAAM,EAAEhB,cAAc,CAAC,CAAC;EACxBiB,WAAW,EAAE,EAAE;EACfC,cAAc,EAAE,EAAE;EAClBC,SAAS,EAAE,CACT,WAAW,EACX,UAAU,EACV,QAAQ,EACR,OAAO,EACP,cAAc,CACf;EACDC,WAAW,EAAE,KAAK;EAClBC,QAAQ,EAAE;AACZ,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGvB,WAAW,CAAC;EACnCwB,IAAI,EAAE,MAAM;EACZT,YAAY;EACZU,QAAQ,EAAE;IACRC,OAAO,EAAGC,KAAK,IAAK;MAClBA,KAAK,CAACX,GAAG,IAAI,CAAC;MACdW,KAAK,CAACV,MAAM,GAAGhB,cAAc,CAAC,CAAC;IACjC,CAAC;IACD2B,UAAU,EAAEA,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC7BF,KAAK,CAACT,WAAW,GAAGW,MAAM,CAACC,OAAO;MAClCH,KAAK,CAACR,cAAc,CAACY,IAAI,CAAC;QACxBf,GAAG,EAAEW,KAAK,CAACX,GAAG;QACdgB,OAAO,EAAEH,MAAM,CAACC;MAClB,CAAC,CAAC;;MAEF;MACA,IAAIH,KAAK,CAACR,cAAc,CAACc,MAAM,GAAG,EAAE,EAAE;QACpCN,KAAK,CAACR,cAAc,CAACe,KAAK,CAAC,CAAC;MAC9B;IACF,CAAC;IACDC,SAAS,EAAGR,KAAK,IAAK;MACpBA,KAAK,CAACN,WAAW,GAAG,IAAI;IAC1B,CAAC;IACDe,OAAO,EAAGT,KAAK,IAAK;MAClBA,KAAK,CAACL,QAAQ,GAAG,IAAI;IACvB,CAAC;IACDe,SAAS,EAAGV,KAAK,IAAK;MACpB;MACAA,KAAK,CAACN,WAAW,GAAG,KAAK;IAC3B,CAAC;IACDiB,aAAa,EAAEA,CAAA,KAAMvB,YAAY;IACjCwB,aAAa,EAAEA,CAACZ,KAAK,EAAEE,MAAM,KAAK;MAChC,OAAO;QAAE,GAAGA,MAAM,CAACC;MAAQ,CAAC;IAC9B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXJ,OAAO;EACPE,UAAU;EACVO,SAAS;EACTC,OAAO;EACPC,SAAS;EACTC,aAAa;EACbC;AACF,CAAC,GAAGhB,SAAS,CAACiB,OAAO;AAErB,eAAejB,SAAS,CAACkB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}