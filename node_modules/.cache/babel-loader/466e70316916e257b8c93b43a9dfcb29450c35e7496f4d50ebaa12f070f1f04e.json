{"ast":null,"code":"import React,{useEffect}from'react';import{useDispatch,useSelector}from'react-redux';import styled from'styled-components';// Components\nimport GameContainer from'./components/GameContainer';import StartScreen from'./components/StartScreen';import AdBanner from'./components/AdBanner';// Utils\nimport{loadGameState}from'./utils/localStorage';import{loadPlayerState,resetPlayer}from'./store/playerSlice';import{loadGameState as loadGameStateAction,startGame,resetFullGame}from'./store/gameSlice';import{loadQuestState,resetQuests}from'./store/questSlice';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AppContainer=styled.div`\n  display: flex;\n  min-height: 100vh;\n`;const MainContent=styled.main`\n  flex: 1;\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n`;const App=()=>{const dispatch=useDispatch();const gameStarted=useSelector(state=>state.game.gameStarted);const gameOver=useSelector(state=>state.game.gameOver);// Check if there's a saved game\nconst hasSavedGame=loadGameState()!==undefined;// Load saved game on startup\nuseEffect(()=>{const savedState=loadGameState();if(savedState){dispatch(loadPlayerState(savedState.player));dispatch(loadGameStateAction(savedState.game));dispatch(loadQuestState(savedState.quests));}},[dispatch]);const handleStartGame=function(){let continueGame=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(!continueGame){// Reset the game state completely for a new game\ndispatch(resetFullGame());dispatch(resetPlayer());dispatch(resetQuests());}dispatch(startGame());};return/*#__PURE__*/_jsxs(AppContainer,{children:[/*#__PURE__*/_jsx(AdBanner,{position:\"left\"}),/*#__PURE__*/_jsxs(MainContent,{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Drug Wars\"}),!gameStarted&&!gameOver&&/*#__PURE__*/_jsx(StartScreen,{onStartGame:()=>handleStartGame(false),onContinueGame:()=>handleStartGame(true),hasSavedGame:hasSavedGame}),gameStarted&&!gameOver&&/*#__PURE__*/_jsx(GameContainer,{}),gameOver&&/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Game Over\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Your drug empire has come to an end.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>window.location.reload(),children:\"Play Again\"})]})]}),/*#__PURE__*/_jsx(AdBanner,{position:\"right\"})]});};export default App;","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","styled","GameContainer","StartScreen","AdBanner","loadGameState","loadPlayerState","resetPlayer","loadGameStateAction","startGame","resetFullGame","loadQuestState","resetQuests","jsx","_jsx","jsxs","_jsxs","AppContainer","div","MainContent","main","App","dispatch","gameStarted","state","game","gameOver","hasSavedGame","undefined","savedState","player","quests","handleStartGame","continueGame","arguments","length","children","position","onStartGame","onContinueGame","className","onClick","window","location","reload"],"sources":["D:/GitHome/dwarzz/src/App.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\n// Components\r\nimport GameContainer from './components/GameContainer';\r\nimport StartScreen from './components/StartScreen';\r\nimport AdBanner from './components/AdBanner';\r\n\r\n// Utils\r\nimport { loadGameState } from './utils/localStorage';\r\nimport { loadPlayerState, resetPlayer } from './store/playerSlice';\r\nimport { loadGameState as loadGameStateAction, startGame, resetFullGame } from './store/gameSlice';\r\nimport { loadQuestState, resetQuests } from './store/questSlice';\r\n\r\nconst AppContainer = styled.div`\r\n  display: flex;\r\n  min-height: 100vh;\r\n`;\r\n\r\nconst MainContent = styled.main`\r\n  flex: 1;\r\n  padding: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  const gameStarted = useSelector(state => state.game.gameStarted);\r\n  const gameOver = useSelector(state => state.game.gameOver);\r\n\r\n  // Check if there's a saved game\r\n  const hasSavedGame = loadGameState() !== undefined;\r\n\r\n  // Load saved game on startup\r\n  useEffect(() => {\r\n    const savedState = loadGameState();\r\n    if (savedState) {\r\n      dispatch(loadPlayerState(savedState.player));\r\n      dispatch(loadGameStateAction(savedState.game));\r\n      dispatch(loadQuestState(savedState.quests));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  const handleStartGame = (continueGame = false) => {\r\n    if (!continueGame) {\r\n      // Reset the game state completely for a new game\r\n      dispatch(resetFullGame());\r\n      dispatch(resetPlayer());\r\n      dispatch(resetQuests());\r\n    }\r\n    dispatch(startGame());\r\n  };\r\n\r\n  return (\r\n    <AppContainer>\r\n      <AdBanner position=\"left\" />\r\n      \r\n      <MainContent>\r\n        <h1>Drug Wars</h1>\r\n        \r\n        {!gameStarted && !gameOver && (\r\n          <StartScreen \r\n            onStartGame={() => handleStartGame(false)} \r\n            onContinueGame={() => handleStartGame(true)}\r\n            hasSavedGame={hasSavedGame}\r\n          />\r\n        )}\r\n        \r\n        {gameStarted && !gameOver && (\r\n          <GameContainer />\r\n        )}\r\n        \r\n        {gameOver && (\r\n          <div className=\"card\">\r\n            <h2>Game Over</h2>\r\n            <p>Your drug empire has come to an end.</p>\r\n            <button onClick={() => window.location.reload()}>Play Again</button>\r\n          </div>\r\n        )}\r\n      </MainContent>\r\n      \r\n      <AdBanner position=\"right\" />\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default App; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,KAAQ,OAAO,CACxC,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CAEtC;AACA,MAAO,CAAAC,aAAa,KAAM,4BAA4B,CACtD,MAAO,CAAAC,WAAW,KAAM,0BAA0B,CAClD,MAAO,CAAAC,QAAQ,KAAM,uBAAuB,CAE5C;AACA,OAASC,aAAa,KAAQ,sBAAsB,CACpD,OAASC,eAAe,CAAEC,WAAW,KAAQ,qBAAqB,CAClE,OAASF,aAAa,GAAI,CAAAG,mBAAmB,CAAEC,SAAS,CAAEC,aAAa,KAAQ,mBAAmB,CAClG,OAASC,cAAc,CAAEC,WAAW,KAAQ,oBAAoB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEjE,KAAM,CAAAC,YAAY,CAAGhB,MAAM,CAACiB,GAAG;AAC/B;AACA;AACA,CAAC,CAED,KAAM,CAAAC,WAAW,CAAGlB,MAAM,CAACmB,IAAI;AAC/B;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAC,GAAG,CAAGA,CAAA,GAAM,CAChB,KAAM,CAAAC,QAAQ,CAAGvB,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAAwB,WAAW,CAAGvB,WAAW,CAACwB,KAAK,EAAIA,KAAK,CAACC,IAAI,CAACF,WAAW,CAAC,CAChE,KAAM,CAAAG,QAAQ,CAAG1B,WAAW,CAACwB,KAAK,EAAIA,KAAK,CAACC,IAAI,CAACC,QAAQ,CAAC,CAE1D;AACA,KAAM,CAAAC,YAAY,CAAGtB,aAAa,CAAC,CAAC,GAAKuB,SAAS,CAElD;AACA9B,SAAS,CAAC,IAAM,CACd,KAAM,CAAA+B,UAAU,CAAGxB,aAAa,CAAC,CAAC,CAClC,GAAIwB,UAAU,CAAE,CACdP,QAAQ,CAAChB,eAAe,CAACuB,UAAU,CAACC,MAAM,CAAC,CAAC,CAC5CR,QAAQ,CAACd,mBAAmB,CAACqB,UAAU,CAACJ,IAAI,CAAC,CAAC,CAC9CH,QAAQ,CAACX,cAAc,CAACkB,UAAU,CAACE,MAAM,CAAC,CAAC,CAC7C,CACF,CAAC,CAAE,CAACT,QAAQ,CAAC,CAAC,CAEd,KAAM,CAAAU,eAAe,CAAG,QAAAA,CAAA,CAA0B,IAAzB,CAAAC,YAAY,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAN,SAAA,CAAAM,SAAA,IAAG,KAAK,CAC3C,GAAI,CAACD,YAAY,CAAE,CACjB;AACAX,QAAQ,CAACZ,aAAa,CAAC,CAAC,CAAC,CACzBY,QAAQ,CAACf,WAAW,CAAC,CAAC,CAAC,CACvBe,QAAQ,CAACV,WAAW,CAAC,CAAC,CAAC,CACzB,CACAU,QAAQ,CAACb,SAAS,CAAC,CAAC,CAAC,CACvB,CAAC,CAED,mBACEO,KAAA,CAACC,YAAY,EAAAmB,QAAA,eACXtB,IAAA,CAACV,QAAQ,EAACiC,QAAQ,CAAC,MAAM,CAAE,CAAC,cAE5BrB,KAAA,CAACG,WAAW,EAAAiB,QAAA,eACVtB,IAAA,OAAAsB,QAAA,CAAI,WAAS,CAAI,CAAC,CAEjB,CAACb,WAAW,EAAI,CAACG,QAAQ,eACxBZ,IAAA,CAACX,WAAW,EACVmC,WAAW,CAAEA,CAAA,GAAMN,eAAe,CAAC,KAAK,CAAE,CAC1CO,cAAc,CAAEA,CAAA,GAAMP,eAAe,CAAC,IAAI,CAAE,CAC5CL,YAAY,CAAEA,YAAa,CAC5B,CACF,CAEAJ,WAAW,EAAI,CAACG,QAAQ,eACvBZ,IAAA,CAACZ,aAAa,GAAE,CACjB,CAEAwB,QAAQ,eACPV,KAAA,QAAKwB,SAAS,CAAC,MAAM,CAAAJ,QAAA,eACnBtB,IAAA,OAAAsB,QAAA,CAAI,WAAS,CAAI,CAAC,cAClBtB,IAAA,MAAAsB,QAAA,CAAG,sCAAoC,CAAG,CAAC,cAC3CtB,IAAA,WAAQ2B,OAAO,CAAEA,CAAA,GAAMC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAE,CAAAR,QAAA,CAAC,YAAU,CAAQ,CAAC,EACjE,CACN,EACU,CAAC,cAEdtB,IAAA,CAACV,QAAQ,EAACiC,QAAQ,CAAC,OAAO,CAAE,CAAC,EACjB,CAAC,CAEnB,CAAC,CAED,cAAe,CAAAhB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}