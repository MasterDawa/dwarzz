{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  money: 1000,\n  health: 100,\n  inventory: {\n    weed: 0,\n    cocaine: 0,\n    heroin: 0,\n    meth: 0,\n    ecstasy: 0\n  },\n  level: 0,\n  reputation: 0,\n  currentLocation: 'manhattan',\n  passiveIncome: 0,\n  btc: 0,\n  assets: {\n    weedFarm: false,\n    cocaineLab: false,\n    nightclub: false,\n    bitcoinMine: false\n  },\n  miningRigs: {\n    basic: 0,\n    advanced: 0\n  },\n  combat: {\n    attack: 10,\n    defense: 5,\n    weapons: []\n  }\n};\nexport const playerSlice = createSlice({\n  name: 'player',\n  initialState,\n  reducers: {\n    updateMoney: (state, action) => {\n      state.money += action.payload;\n    },\n    updateHealth: (state, action) => {\n      state.health = Math.max(0, Math.min(100, state.health + action.payload));\n    },\n    updateInventory: (state, action) => {\n      const {\n        drug,\n        amount\n      } = action.payload;\n      state.inventory[drug] += amount;\n    },\n    updateLocation: (state, action) => {\n      state.currentLocation = action.payload;\n    },\n    levelUp: state => {\n      state.level += 1;\n      state.combat.attack += 2;\n      state.combat.defense += 1;\n    },\n    updateReputation: (state, action) => {\n      state.reputation += action.payload;\n    },\n    updatePassiveIncome: (state, action) => {\n      state.passiveIncome += action.payload;\n    },\n    updateBTC: (state, action) => {\n      state.btc += action.payload;\n    },\n    addAsset: (state, action) => {\n      state.assets[action.payload] = true;\n    },\n    addWeapon: (state, action) => {\n      state.combat.weapons.push(action.payload);\n    },\n    resetPlayer: () => initialState,\n    loadPlayerState: (state, action) => {\n      return {\n        ...action.payload\n      };\n    },\n    addMiningRig: (state, action) => {\n      const {\n        type\n      } = action.payload;\n      state.miningRigs[type] += 1;\n    },\n    generatePassiveBTC: state => {\n      const basicRigs = state.miningRigs.basic;\n      const advancedRigs = state.miningRigs.advanced;\n      const dailyBTC = basicRigs * 0.01 + advancedRigs * 0.05;\n      state.btc += dailyBTC;\n    }\n  }\n});\nexport const {\n  updateMoney,\n  updateHealth,\n  updateInventory,\n  updateLocation,\n  levelUp,\n  updateReputation,\n  updatePassiveIncome,\n  updateBTC,\n  addAsset,\n  addWeapon,\n  resetPlayer,\n  loadPlayerState,\n  addMiningRig,\n  generatePassiveBTC\n} = playerSlice.actions;\nexport default playerSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","money","health","inventory","weed","cocaine","heroin","meth","ecstasy","level","reputation","currentLocation","passiveIncome","btc","assets","weedFarm","cocaineLab","nightclub","bitcoinMine","miningRigs","basic","advanced","combat","attack","defense","weapons","playerSlice","name","reducers","updateMoney","state","action","payload","updateHealth","Math","max","min","updateInventory","drug","amount","updateLocation","levelUp","updateReputation","updatePassiveIncome","updateBTC","addAsset","addWeapon","push","resetPlayer","loadPlayerState","addMiningRig","type","generatePassiveBTC","basicRigs","advancedRigs","dailyBTC","actions","reducer"],"sources":["D:/GitHome/dwarzz/src/store/playerSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  money: 1000,\r\n  health: 100,\r\n  inventory: {\r\n    weed: 0,\r\n    cocaine: 0,\r\n    heroin: 0,\r\n    meth: 0,\r\n    ecstasy: 0\r\n  },\r\n  level: 0,\r\n  reputation: 0,\r\n  currentLocation: 'manhattan',\r\n  passiveIncome: 0,\r\n  btc: 0,\r\n  assets: {\r\n    weedFarm: false,\r\n    cocaineLab: false,\r\n    nightclub: false,\r\n    bitcoinMine: false\r\n  },\r\n  miningRigs: {\r\n    basic: 0,\r\n    advanced: 0\r\n  },\r\n  combat: {\r\n    attack: 10,\r\n    defense: 5,\r\n    weapons: []\r\n  }\r\n};\r\n\r\nexport const playerSlice = createSlice({\r\n  name: 'player',\r\n  initialState,\r\n  reducers: {\r\n    updateMoney: (state, action) => {\r\n      state.money += action.payload;\r\n    },\r\n    updateHealth: (state, action) => {\r\n      state.health = Math.max(0, Math.min(100, state.health + action.payload));\r\n    },\r\n    updateInventory: (state, action) => {\r\n      const { drug, amount } = action.payload;\r\n      state.inventory[drug] += amount;\r\n    },\r\n    updateLocation: (state, action) => {\r\n      state.currentLocation = action.payload;\r\n    },\r\n    levelUp: (state) => {\r\n      state.level += 1;\r\n      state.combat.attack += 2;\r\n      state.combat.defense += 1;\r\n    },\r\n    updateReputation: (state, action) => {\r\n      state.reputation += action.payload;\r\n    },\r\n    updatePassiveIncome: (state, action) => {\r\n      state.passiveIncome += action.payload;\r\n    },\r\n    updateBTC: (state, action) => {\r\n      state.btc += action.payload;\r\n    },\r\n    addAsset: (state, action) => {\r\n      state.assets[action.payload] = true;\r\n    },\r\n    addWeapon: (state, action) => {\r\n      state.combat.weapons.push(action.payload);\r\n    },\r\n    resetPlayer: () => initialState,\r\n    loadPlayerState: (state, action) => {\r\n      return { ...action.payload };\r\n    },\r\n    addMiningRig: (state, action) => {\r\n      const { type } = action.payload;\r\n      state.miningRigs[type] += 1;\r\n    },\r\n    generatePassiveBTC: (state) => {\r\n      const basicRigs = state.miningRigs.basic;\r\n      const advancedRigs = state.miningRigs.advanced;\r\n      const dailyBTC = (basicRigs * 0.01) + (advancedRigs * 0.05);\r\n      state.btc += dailyBTC;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { \r\n  updateMoney, \r\n  updateHealth, \r\n  updateInventory, \r\n  updateLocation, \r\n  levelUp, \r\n  updateReputation,\r\n  updatePassiveIncome,\r\n  updateBTC,\r\n  addAsset,\r\n  addWeapon,\r\n  resetPlayer,\r\n  loadPlayerState,\r\n  addMiningRig,\r\n  generatePassiveBTC\r\n} = playerSlice.actions;\r\n\r\nexport default playerSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}