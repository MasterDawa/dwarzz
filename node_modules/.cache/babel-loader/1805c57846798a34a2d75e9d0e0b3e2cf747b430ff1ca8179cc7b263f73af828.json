{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// Initial quests data\nconst questData = {\n  smallTimeDealer: {\n    id: 'smallTimeDealer',\n    title: 'Small Time Dealer',\n    description: 'Buy 5 units of weed to start your journey.',\n    requirement: {\n      type: 'purchase',\n      drug: 'weed',\n      amount: 5,\n      location: 'any'\n    },\n    reward: {\n      money: 100,\n      levelUp: true,\n      reputation: 5\n    },\n    progress: 0,\n    completed: false,\n    unlocked: true,\n    nextQuests: ['expandingTerritory']\n  },\n  expandingTerritory: {\n    id: 'expandingTerritory',\n    title: 'Expanding Territory',\n    description: 'Sell 10 units of weed in Brooklyn.',\n    requirement: {\n      type: 'sell',\n      drug: 'weed',\n      amount: 10,\n      location: 'brooklyn'\n    },\n    reward: {\n      money: 250,\n      levelUp: true,\n      reputation: 10\n    },\n    progress: 0,\n    completed: false,\n    unlocked: false,\n    nextQuests: ['bigPlayer']\n  },\n  bigPlayer: {\n    id: 'bigPlayer',\n    title: 'Big Player',\n    description: 'Sell 20 units of cocaine in Manhattan.',\n    requirement: {\n      type: 'sell',\n      drug: 'cocaine',\n      amount: 20,\n      location: 'manhattan'\n    },\n    reward: {\n      money: 1000,\n      levelUp: true,\n      reputation: 25\n    },\n    progress: 0,\n    completed: false,\n    unlocked: false,\n    nextQuests: ['drugOverlord']\n  },\n  drugOverlord: {\n    id: 'drugOverlord',\n    title: 'Drug Overlord',\n    description: 'Accumulate $10,000 in cash.',\n    requirement: {\n      type: 'accumulate',\n      resource: 'money',\n      amount: 10000\n    },\n    reward: {\n      money: 5000,\n      levelUp: true,\n      reputation: 50\n    },\n    progress: 0,\n    completed: false,\n    unlocked: false,\n    nextQuests: []\n  }\n};\nconst initialState = {\n  quests: questData,\n  activeQuestIds: ['smallTimeDealer'],\n  completedQuestIds: []\n};\nexport const questSlice = createSlice({\n  name: 'quests',\n  initialState,\n  reducers: {\n    updateQuestProgress: (state, action) => {\n      const {\n        questId,\n        progress\n      } = action.payload;\n      if (state.quests[questId]) {\n        state.quests[questId].progress = progress;\n\n        // Check if quest is completed\n        if (progress >= state.quests[questId].requirement.amount && !state.quests[questId].completed) {\n          state.quests[questId].completed = true;\n          state.completedQuestIds.push(questId);\n\n          // Remove from active quests\n          state.activeQuestIds = state.activeQuestIds.filter(id => id !== questId);\n\n          // Unlock next quests\n          state.quests[questId].nextQuests.forEach(nextQuestId => {\n            if (state.quests[nextQuestId]) {\n              state.quests[nextQuestId].unlocked = true;\n              state.activeQuestIds.push(nextQuestId);\n            }\n          });\n        }\n      }\n    },\n    resetQuests: () => initialState,\n    loadQuestState: (state, action) => {\n      return {\n        ...action.payload\n      };\n    }\n  }\n});\nexport const {\n  updateQuestProgress,\n  resetQuests,\n  loadQuestState\n} = questSlice.actions;\nexport default questSlice.reducer;","map":{"version":3,"names":["createSlice","questData","smallTimeDealer","id","title","description","requirement","type","drug","amount","location","reward","money","levelUp","reputation","progress","completed","unlocked","nextQuests","expandingTerritory","bigPlayer","drugOverlord","resource","initialState","quests","activeQuestIds","completedQuestIds","questSlice","name","reducers","updateQuestProgress","state","action","questId","payload","push","filter","forEach","nextQuestId","resetQuests","loadQuestState","actions","reducer"],"sources":["D:/GitHome/dwarzz/src/store/questSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\n// Initial quests data\r\nconst questData = {\r\n  smallTimeDealer: {\r\n    id: 'smallTimeDealer',\r\n    title: 'Small Time Dealer',\r\n    description: 'Buy 5 units of weed to start your journey.',\r\n    requirement: {\r\n      type: 'purchase',\r\n      drug: 'weed',\r\n      amount: 5,\r\n      location: 'any'\r\n    },\r\n    reward: {\r\n      money: 100,\r\n      levelUp: true,\r\n      reputation: 5\r\n    },\r\n    progress: 0,\r\n    completed: false,\r\n    unlocked: true,\r\n    nextQuests: ['expandingTerritory']\r\n  },\r\n  expandingTerritory: {\r\n    id: 'expandingTerritory',\r\n    title: 'Expanding Territory',\r\n    description: 'Sell 10 units of weed in Brooklyn.',\r\n    requirement: {\r\n      type: 'sell',\r\n      drug: 'weed',\r\n      amount: 10,\r\n      location: 'brooklyn'\r\n    },\r\n    reward: {\r\n      money: 250,\r\n      levelUp: true,\r\n      reputation: 10\r\n    },\r\n    progress: 0,\r\n    completed: false,\r\n    unlocked: false,\r\n    nextQuests: ['bigPlayer']\r\n  },\r\n  bigPlayer: {\r\n    id: 'bigPlayer',\r\n    title: 'Big Player',\r\n    description: 'Sell 20 units of cocaine in Manhattan.',\r\n    requirement: {\r\n      type: 'sell',\r\n      drug: 'cocaine',\r\n      amount: 20,\r\n      location: 'manhattan'\r\n    },\r\n    reward: {\r\n      money: 1000,\r\n      levelUp: true,\r\n      reputation: 25\r\n    },\r\n    progress: 0,\r\n    completed: false,\r\n    unlocked: false,\r\n    nextQuests: ['drugOverlord']\r\n  },\r\n  drugOverlord: {\r\n    id: 'drugOverlord',\r\n    title: 'Drug Overlord',\r\n    description: 'Accumulate $10,000 in cash.',\r\n    requirement: {\r\n      type: 'accumulate',\r\n      resource: 'money',\r\n      amount: 10000\r\n    },\r\n    reward: {\r\n      money: 5000,\r\n      levelUp: true,\r\n      reputation: 50\r\n    },\r\n    progress: 0,\r\n    completed: false,\r\n    unlocked: false,\r\n    nextQuests: []\r\n  }\r\n};\r\n\r\nconst initialState = {\r\n  quests: questData,\r\n  activeQuestIds: ['smallTimeDealer'],\r\n  completedQuestIds: []\r\n};\r\n\r\nexport const questSlice = createSlice({\r\n  name: 'quests',\r\n  initialState,\r\n  reducers: {\r\n    updateQuestProgress: (state, action) => {\r\n      const { questId, progress } = action.payload;\r\n      \r\n      if (state.quests[questId]) {\r\n        state.quests[questId].progress = progress;\r\n        \r\n        // Check if quest is completed\r\n        if (progress >= state.quests[questId].requirement.amount && !state.quests[questId].completed) {\r\n          state.quests[questId].completed = true;\r\n          state.completedQuestIds.push(questId);\r\n          \r\n          // Remove from active quests\r\n          state.activeQuestIds = state.activeQuestIds.filter(id => id !== questId);\r\n          \r\n          // Unlock next quests\r\n          state.quests[questId].nextQuests.forEach(nextQuestId => {\r\n            if (state.quests[nextQuestId]) {\r\n              state.quests[nextQuestId].unlocked = true;\r\n              state.activeQuestIds.push(nextQuestId);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    },\r\n    resetQuests: () => initialState,\r\n    loadQuestState: (state, action) => {\r\n      return { ...action.payload };\r\n    }\r\n  }\r\n});\r\n\r\nexport const { \r\n  updateQuestProgress, \r\n  resetQuests,\r\n  loadQuestState\r\n} = questSlice.actions;\r\n\r\nexport default questSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}