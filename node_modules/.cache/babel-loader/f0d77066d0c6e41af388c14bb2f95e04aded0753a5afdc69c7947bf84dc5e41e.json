{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';const initialState={money:1000,health:100,inventory:{weed:0,cocaine:0,heroin:0,meth:0,ecstasy:0},level:0,reputation:0,currentLocation:'manhattan',passiveIncome:0,btc:0,assets:{weedFarm:false,cocaineLab:false,nightclub:false,bitcoinMine:false},miningRigs:{basic:0,advanced:0},combat:{attack:10,defense:5,weapons:[]}};export const playerSlice=createSlice({name:'player',initialState,reducers:{updateMoney:(state,action)=>{state.money+=action.payload;},updateHealth:(state,action)=>{state.health=Math.max(0,Math.min(100,state.health+action.payload));},updateInventory:(state,action)=>{const{drug,amount}=action.payload;state.inventory[drug]+=amount;},updateLocation:(state,action)=>{state.currentLocation=action.payload;},levelUp:state=>{state.level+=1;state.combat.attack+=2;state.combat.defense+=1;},updateReputation:(state,action)=>{state.reputation+=action.payload;},updatePassiveIncome:(state,action)=>{state.passiveIncome+=action.payload;},updateBTC:(state,action)=>{state.btc+=action.payload;},addAsset:(state,action)=>{state.assets[action.payload]=true;},addWeapon:(state,action)=>{state.combat.weapons.push(action.payload);},resetPlayer:()=>initialState,loadPlayerState:(state,action)=>{return{...action.payload};},addMiningRig:(state,action)=>{const{type}=action.payload;state.miningRigs[type]+=1;},generatePassiveBTC:state=>{const basicRigs=state.miningRigs.basic;const advancedRigs=state.miningRigs.advanced;const dailyBTC=basicRigs*0.01+advancedRigs*0.05;state.btc+=dailyBTC;}}});export const{updateMoney,updateHealth,updateInventory,updateLocation,levelUp,updateReputation,updatePassiveIncome,updateBTC,addAsset,addWeapon,resetPlayer,loadPlayerState,addMiningRig,generatePassiveBTC}=playerSlice.actions;export default playerSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","money","health","inventory","weed","cocaine","heroin","meth","ecstasy","level","reputation","currentLocation","passiveIncome","btc","assets","weedFarm","cocaineLab","nightclub","bitcoinMine","miningRigs","basic","advanced","combat","attack","defense","weapons","playerSlice","name","reducers","updateMoney","state","action","payload","updateHealth","Math","max","min","updateInventory","drug","amount","updateLocation","levelUp","updateReputation","updatePassiveIncome","updateBTC","addAsset","addWeapon","push","resetPlayer","loadPlayerState","addMiningRig","type","generatePassiveBTC","basicRigs","advancedRigs","dailyBTC","actions","reducer"],"sources":["D:/GitHome/dwarzz/src/store/playerSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  money: 1000,\r\n  health: 100,\r\n  inventory: {\r\n    weed: 0,\r\n    cocaine: 0,\r\n    heroin: 0,\r\n    meth: 0,\r\n    ecstasy: 0\r\n  },\r\n  level: 0,\r\n  reputation: 0,\r\n  currentLocation: 'manhattan',\r\n  passiveIncome: 0,\r\n  btc: 0,\r\n  assets: {\r\n    weedFarm: false,\r\n    cocaineLab: false,\r\n    nightclub: false,\r\n    bitcoinMine: false\r\n  },\r\n  miningRigs: {\r\n    basic: 0,\r\n    advanced: 0\r\n  },\r\n  combat: {\r\n    attack: 10,\r\n    defense: 5,\r\n    weapons: []\r\n  }\r\n};\r\n\r\nexport const playerSlice = createSlice({\r\n  name: 'player',\r\n  initialState,\r\n  reducers: {\r\n    updateMoney: (state, action) => {\r\n      state.money += action.payload;\r\n    },\r\n    updateHealth: (state, action) => {\r\n      state.health = Math.max(0, Math.min(100, state.health + action.payload));\r\n    },\r\n    updateInventory: (state, action) => {\r\n      const { drug, amount } = action.payload;\r\n      state.inventory[drug] += amount;\r\n    },\r\n    updateLocation: (state, action) => {\r\n      state.currentLocation = action.payload;\r\n    },\r\n    levelUp: (state) => {\r\n      state.level += 1;\r\n      state.combat.attack += 2;\r\n      state.combat.defense += 1;\r\n    },\r\n    updateReputation: (state, action) => {\r\n      state.reputation += action.payload;\r\n    },\r\n    updatePassiveIncome: (state, action) => {\r\n      state.passiveIncome += action.payload;\r\n    },\r\n    updateBTC: (state, action) => {\r\n      state.btc += action.payload;\r\n    },\r\n    addAsset: (state, action) => {\r\n      state.assets[action.payload] = true;\r\n    },\r\n    addWeapon: (state, action) => {\r\n      state.combat.weapons.push(action.payload);\r\n    },\r\n    resetPlayer: () => initialState,\r\n    loadPlayerState: (state, action) => {\r\n      return { ...action.payload };\r\n    },\r\n    addMiningRig: (state, action) => {\r\n      const { type } = action.payload;\r\n      state.miningRigs[type] += 1;\r\n    },\r\n    generatePassiveBTC: (state) => {\r\n      const basicRigs = state.miningRigs.basic;\r\n      const advancedRigs = state.miningRigs.advanced;\r\n      const dailyBTC = (basicRigs * 0.01) + (advancedRigs * 0.05);\r\n      state.btc += dailyBTC;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { \r\n  updateMoney, \r\n  updateHealth, \r\n  updateInventory, \r\n  updateLocation, \r\n  levelUp, \r\n  updateReputation,\r\n  updatePassiveIncome,\r\n  updateBTC,\r\n  addAsset,\r\n  addWeapon,\r\n  resetPlayer,\r\n  loadPlayerState,\r\n  addMiningRig,\r\n  generatePassiveBTC\r\n} = playerSlice.actions;\r\n\r\nexport default playerSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}